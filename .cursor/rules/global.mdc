---
alwaysApply: true
---
# Homeman 项目规则文件

## 项目概述
Homeman 是一个用于管理 Homepage (gethomepage.dev) 配置文件的 Web 管理界面。
- **技术栈**: Python 3.8+ + Flask + Bootstrap 5
- **架构**: MVC 架构，基于 Flask 框架
- **数据存储**: YAML 配置文件
- **部署**: Docker 容器化部署

## 🏗️ 架构原则

### 1. 目录结构规范
```
homeman/
├── app.py                 # Flask 应用主文件
├── utils/                 # 工具模块
│   ├── yaml_manager.py    # YAML 文件管理
│   └── config_validator.py # 配置验证
├── templates/             # Jinja2 模板
├── static/               # 静态资源
└── config/               # Homepage 配置文件
```

### 2. 模块化设计
- **utils/yaml_manager.py**: 专门处理 YAML 文件的读写操作
- **utils/config_validator.py**: 负责配置数据的验证
- **templates/**: 使用 Jinja2 模板引擎，基于 base.html 继承
- **static/**: 存放 CSS、JS、图片等静态资源

### 3. 配置文件管理
- 支持的配置类型: settings.yaml, bookmarks.yaml, services.yaml, docker.yaml, widgets.yaml
- 配置文件路径通过环境变量 `HOMEPAGE_CONFIG_PATH` 指定
- 自动备份机制，支持配置恢复

## 💻 编码规范

### 1. Python 代码规范
- 遵循 PEP 8 编码风格
- 使用有意义的变量和函数名（中英文均可）
- 每个函数必须有文档字符串说明功能
- 使用类型提示（Type Hints）提高代码可读性

```python
def save_bookmarks(self, bookmarks_data: list) -> tuple[bool, str]:
    """保存书签配置
    
    Args:
        bookmarks_data: 书签配置数据
        
    Returns:
        tuple: (是否成功, 消息)
    """
```

### 2. Flask 路由规范
- RESTful API 设计原则
- 使用合适的 HTTP 方法 (GET, POST, PUT, DELETE)
- API 路由使用 `/api/` 前缀
- 页面路由使用简洁的路径

```python
@app.route('/bookmarks')              # 页面路由
@app.route('/api/bookmarks', methods=['POST'])  # API 路由
```

### 3. 模板规范
- 所有模板继承自 `base.html`
- 使用 Bootstrap 5 组件
- 模板变量使用有意义的名称
- 支持国际化，界面文本使用中文

### 4. JavaScript 规范
- 使用现代 ES6+ 语法
- 函数命名使用驼峰命名法
- 使用 `fetch()` API 进行 AJAX 请求
- 错误处理要完善，用户友好的提示信息

## 🔧 开发指南

### 1. 新功能开发流程
1. 在 `utils/` 目录创建相应的管理器类
2. 在 `app.py` 中添加路由处理
3. 创建对应的 HTML 模板
4. 添加必要的 JavaScript 交互
5. 更新配置验证器
6. 编写测试用例

### 2. 配置管理模式
```python
# 标准的配置操作模式
def handle_config_operation():
    try:
        # 1. 获取请求数据
        data = request.get_json()
        
        # 2. 验证数据
        is_valid, msg = validator.validate_xxx(data)
        if not is_valid:
            return jsonify({'status': 'error', 'message': msg})
        
        # 3. 保存配置
        success, save_msg = yaml_manager.save_xxx(data)
        if success:
            return jsonify({'status': 'success', 'message': '保存成功'})
        else:
            return jsonify({'status': 'error', 'message': save_msg})
            
    except Exception as e:
        return jsonify({'status': 'error', 'message': f'操作失败: {str(e)}'})
```

### 3. 错误处理原则
- 所有外部操作都要有异常处理
- 用户友好的错误信息
- 日志记录重要操作和错误
- API 返回统一的错误格式

### 4. 安全考虑
- 输入验证：所有用户输入都要验证
- 文件操作：限制在指定目录内
- 配置验证：确保生成的 YAML 符合 Homepage 规范
- 环境变量：敏感信息通过环境变量配置

## 🧪 测试规范

### 1. 测试文件结构
- 测试文件命名: `test_*.py`
- 单元测试覆盖所有工具类
- 集成测试覆盖主要 API 端点

### 2. 测试数据
- 使用临时目录进行测试
- 测试用例要独立，互不影响
- 包含正常情况和异常情况测试

## 🚀 部署规范

### 1. 环境配置
```bash
# 必需的环境变量
HOMEPAGE_CONFIG_PATH=/app/config  # Homepage 配置文件路径
FLASK_ENV=production             # Flask 运行环境
```

### 2. Docker 部署
- 使用多阶段构建优化镜像大小
- 配置文件通过 volume 挂载
- 支持健康检查
- 非 root 用户运行

### 3. 备份策略
- 自动备份配置文件
- 支持手动备份和恢复
- 备份文件命名包含时间戳

## 📚 文档要求

### 1. 代码文档
- 所有公共函数都要有详细的文档字符串
- 复杂逻辑要有行内注释
- API 接口要有参数和返回值说明

### 2. 用户文档
- README.md 包含完整的安装和使用指南
- 功能更新要同步更新文档
- 提供 Docker 部署示例

## 🔄 版本管理

### 1. Git 规范
- 使用有意义的提交信息
- 功能分支开发，合并到主分支
- 重要版本打 tag

### 2. 发布规范
- 遵循语义化版本控制
- 发布前要进行充分测试
- 更新 CHANGELOG

## 🎯 性能优化

### 1. 前端优化
- 静态资源压缩
- 合理使用缓存
- 减少不必要的 AJAX 请求

### 2. 后端优化
- YAML 文件缓存机制
- 数据库查询优化（如有）
- 合理的错误处理避免资源泄露

## 📋 代码审查清单

- [ ] 代码符合 PEP 8 规范
- [ ] 函数有完整的文档字符串
- [ ] 异常处理完善
- [ ] 用户输入有验证
- [ ] API 返回格式统一
- [ ] 模板继承结构正确
- [ ] JavaScript 错误处理完善
- [ ] 测试用例覆盖主要功能

## 💡 最佳实践

1. **配置优先**: 所有可配置项都通过环境变量或配置文件设置
2. **用户体验**: 提供清晰的操作提示和错误信息
3. **数据安全**: 定期备份，操作前验证
4. **代码复用**: 相似功能抽象成通用组件
5. **渐进增强**: 基础功能优先，高级功能逐步添加 